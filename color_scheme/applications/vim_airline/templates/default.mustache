" vi:syntax=vim
"" {{scheme_name}} scheme by {{scheme_author}}

"" setup theme
hi clear
if exists('syntac_on')
    syntax reset
endif
syntax reset
let g:colors_name = "{{scheme_slug}}"

"" GUI color definitions
let s:cgBG = "#{{baseBG_hex}}"
let s:cgBg = "#{{baseBg_hex}}"
let s:cgBf = "#{{baseBf_hex}}"
let s:cgBF = "#{{baseBF_hex}}"
let s:cgFG = "#{{baseFG_hex}}"
let s:cgFg = "#{{baseFg_hex}}"
let s:cgB1 = "#{{baseB1_hex}}"
let s:cgB2 = "#{{baseB2_hex}}"
let s:cgB3 = "#{{baseB3_hex}}"
let s:cgB4 = "#{{baseB4_hex}}"
let s:cgB5 = "#{{baseB5_hex}}"
let s:cgF1 = "#{{baseF1_hex}}"
let s:cgF2 = "#{{baseF2_hex}}"
let s:cgF3 = "#{{baseF3_hex}}"
let s:cgF4 = "#{{baseF4_hex}}"
let s:cgF5 = "#{{baseF5_hex}}"
let s:cgF6 = "#{{baseF6_hex}}"
let s:cgF7 = "#{{baseF7_hex}}"

"" TERMINAL color definitions
let s:ctBG = "00"
let s:ctBg = "16"
let s:ctBf = "17"
let s:ctBF = "18"
let s:ctFG = "15"
let s:ctFg = "19"
let s:ctB1 = "20"
let s:ctB2 = "21"
let s:ctB3 = "22"
let s:ctB4 = "23"
let s:ctB5 = "24"
let s:ctF1 = "01"
let s:ctF2 = "25"
let s:ctF3 = "03"
let s:ctF4 = "02"
let s:ctF5 = "06"
let s:ctF6 = "04"
let s:ctF7 = "05"


  let g:airline#themes#base16#palette = {}

  " Normal mode
  let s:N1 = [s:gui_dark_gray, s:gui_green, s:cterm_dark_gray, s:cterm_green]
  if s:improved_contrast
    let s:N2 = [s:gui_lightlight_gray, s:gui_med_gray_lo, s:cterm_lightlight_gray, s:cterm_med_gray_lo]
  else

    let s:N2 = [s:gui_light_gray, s:gui_med_gray_lo, s:cterm_light_gray, s:cterm_med_gray_lo]
  endif
  let s:N3 = [s:gui_green, s:gui_med_gray_hi, s:cterm_green, s:cterm_med_gray_hi]
  let g:airline#themes#base16#palette.normal = airline#themes#generate_color_map(s:N1, s:N2, s:N3)
  let g:airline#themes#base16#palette.normal_modified = {
        \ 'airline_c': [s:gui_orange, s:gui_med_gray_hi, s:cterm_orange, s:cterm_med_gray_hi, ''],
        \ }

  " Insert mode
  let s:I1 = [s:gui_med_gray_hi, s:gui_blue, s:cterm_med_gray_hi, s:cterm_blue]
  let s:I3 = [s:gui_blue, s:gui_med_gray_hi, s:cterm_blue, s:cterm_med_gray_hi]
  let g:airline#themes#base16#palette.insert = airline#themes#generate_color_map(s:I1, s:N2, s:I3)
  let g:airline#themes#base16#palette.insert_modified = copy(g:airline#themes#base16#palette.normal_modified)
  let g:airline#themes#base16#palette.insert_paste = {
        \ 'airline_a': [s:gui_dark_gray, s:gui_orange, s:cterm_dark_gray, s:cterm_orange, ''],
        \ }

  " Replace mode
  let g:airline#themes#base16#palette.replace = {
        \ 'airline_a': [s:gui_dark_gray, s:gui_red, s:cterm_dark_gray, s:cterm_red, ''],
        \ 'airline_c': [s:gui_red, s:gui_med_gray_hi, s:cterm_red, s:cterm_med_gray_hi, ''],
        \ }
  let g:airline#themes#base16#palette.replace_modified = copy(g:airline#themes#base16#palette.insert_modified)

  " Visual mode
  let s:V1 = [s:gui_dark_gray, s:gui_pink, s:cterm_dark_gray, s:cterm_pink]
  let s:V3 = [s:gui_pink, s:gui_med_gray_hi, s:cterm_pink, s:cterm_med_gray_hi]
  let g:airline#themes#base16#palette.visual = airline#themes#generate_color_map(s:V1, s:N2, s:V3)
  let g:airline#themes#base16#palette.visual_modified = copy(g:airline#themes#base16#palette.insert_modified)

  " Inactive window
  if s:improved_contrast
    let s:IA = [s:gui_dark_gray, s:gui_med_gray_hi, s:cterm_lightlight_gray, s:cterm_med_gray_hi, '']
  else
    let s:IA = [s:gui_dark_gray, s:gui_med_gray_hi, s:cterm_light_gray, s:cterm_med_gray_hi, '']
  endif
  let g:airline#themes#base16#palette.inactive = airline#themes#generate_color_map(s:IA, s:IA, s:IA)
  let g:airline#themes#base16#palette.inactive_modified = {
        \ 'airline_c': [s:gui_orange, '', s:cterm_orange, '', ''],
        \ }


"" highlighting function
function! s:fHi(grp, gfg, gbg, tfg, tbg, attr)
    let cmd = ""
    if a:gfg != ""
        let cmd = cmd . " guifg=" . a:gfg
    endif
    if a:gbg != ""
        let cmd = cmd . " guibg=" . a:gbg
    endif
    if a:tfg != ""
        let cmd = cmd . " ctermfg=" . a:tfg
    endif
    if a:gbg != ""
        let cmd = cmd . " ctermbg=" . a:tbg
    endif
    if a:attr != ""
        let cmd = cmd . " gui=" . a:attr
        let cmd = cmd . " cterm=" . a:attr
    endif
    if cmd != ""
        execute "hi " . a:grp . cmd
    endif
endfunction

"" default highlighting groups
call <SID>fHi("ColorColumn",  "",     s:cgBf, "",     s:ctBf, "")
call <SID>fHi("Conceal",      s:cgF6, s:cgBG, s:ctF6, s:ctBG, "")
call <SID>fHi("CursorColumn", "",     s:cgBg, "",     s:ctBg, "NONE")
call <SID>fHi("CursorLine",   "",     s:cgBg, "",     s:ctBg, "NONE")
call <SID>fHi("Directory",    s:cgF6, "",     s:ctF6, "",     "bold")
call <SID>fHi("DiffAdd",      s:cgFG, s:cgB2, s:ctFG, s:ctB2, "NONE")
call <SID>fHi("DiffChange",   s:cgFG, s:cgB3, s:ctFG, s:ctB3, "NONE")
call <SID>fHi("DiffDelete",   s:cgFG, s:cgB1, s:ctFG, s:ctB1, "NONE")
call <SID>fHi("DiffText",     s:cgF1, s:cgB5, s:ctF1, s:ctB5, "bold")
call <SID>fHi("EndOfBuffer",  s:cgFG, s:cgBG, s:ctFG, s:ctBG, "")
call <SID>fHi("ErrorMsg",     s:cgFG, s:cgB1, s:ctFG, s:ctB1, "")
call <SID>fHi("VertSplit",    s:cgBf, s:cgBf, s:ctBf, s:ctBf, "NONE")
call <SID>fHi("Folded",       s:cgFG, s:cgB4, s:ctFG, s:ctB4, "")
call <SID>fHi("FoldColumn",   s:cgFG, s:cgB4, s:ctFG, s:ctB4, "")
call <SID>fHi("SignColumn",   s:cgFG, s:cgB4, s:ctFG, s:ctB4, "")
call <SID>fHi("IncSearch",    s:cgFG, s:cgB5, s:ctFG, s:ctB5, "NONE")
call <SID>fHi("LineNr",       s:cgFg, s:cgBg, s:ctFg, s:ctBg, "NONE")
call <SID>fHi("CursorLineNr", s:cgF6, s:cgBg, s:ctF6, s:ctBg, "NONE")
call <SID>fHi("MatchParen",   "",     s:cgB5, "",     s:ctB5, "NONE")
call <SID>fHi("ModeMsg",      s:cgF6, "",     s:ctF6, "",     "NONE")
call <SID>fHi("MoreMsg",      s:cgF6, "",     s:ctF6, "",     "NONE")
call <SID>fHi("NonText",      s:cgFg, "",     s:ctFg, "",     "NONE")
call <SID>fHi("Normal",       s:cgFG, s:cgBG, s:ctFG, s:ctBG, "")
call <SID>fHi("Pmenu",        s:cgFG, s:cgBg, s:ctFG, s:ctBg, "")
call <SID>fHi("PmenuSel",     s:cgFG, s:cgBF, s:ctFG, s:ctBF, "")
call <SID>fHi("PmenuSbar",    "",     s:cgBf, "",     s:ctBf, "")
call <SID>fHi("PmenuThumb",   "",     s:cgB5, "",     s:ctB5, "")
call <SID>fHi("Question",     s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("QuickFixLine", "",     s:cgB5, "",     s:ctB5, "NONE")
call <SID>fHi("Search",       s:cgFG, s:cgB5, s:ctFG, s:ctB5, "NONE")
call <SID>fHi("SpecialKey",   s:cgF6, "",     s:ctF6, "",     "")
call <SID>fHi("SpellBad",     "",     s:cgB1, "",     s:ctB1, "NONE")
call <SID>fHi("SpellCap",     "",     s:cgB3, "",     s:ctB3, "NONE")
call <SID>fHi("SpellLocal",   "",     s:cgB5, "",     s:ctB5, "NONE")
call <SID>fHi("SpellRare",    "",     s:cgB2, "",     s:ctB2, "NONE")
call <SID>fHi("StatusLine",   s:cgFG, s:cgBF, s:ctFG, s:ctBF, "NONE")
call <SID>fHi("StatusLineNC", s:cgFG, s:cgBg, s:ctFG, s:ctBg, "NONE")
call <SID>fHi("StatusLineTerm", s:cgFG, s:cgBF, s:ctFG, s:ctBF, "NONE")
call <SID>fHi("StatusLineTermNC", s:cgFG, s:cgBg, s:ctFG, s:ctBg, "NONE")
call <SID>fHi("TabLine",      s:cgFG, s:cgBG, s:ctFG, s:ctBG, "NONE")
call <SID>fHi("TabLineFill",  s:cgFG, s:cgBG, s:ctFG, s:ctBG, "NONE")
call <SID>fHi("TabLineSel",   s:cgFG, s:cgBF, s:ctFG, s:ctBF, "NONE")
call <SID>fHi("Terminal",     s:cgFG, s:cgBG, s:ctFG, s:ctBG, "NONE")
call <SID>fHi("Title",        s:cgF6, "",     s:ctF6, "",     "")
call <SID>fHi("Visual",       "",     s:cgBF, "",     s:ctBF, "")
call <SID>fHi("VisualNOS",    "",     s:cgBF, "",     s:ctBF, "NONE")
call <SID>fHi("WarningMsg",   s:cgFG, s:cgB3, s:ctFG, s:ctB3, "")
call <SID>fHi("WildMenu",     s:cgFG, s:cgB5, s:ctFG, s:ctB5, "")

"" highlighting groups that are common for many languages
" Comment group
call <SID>fHi("Comment",      s:cgFg, "",     s:ctFg, "",     "")
" Constant group
call <SID>fHi("Constant",     s:cgF5, "",     s:ctF5, "",     "")
call <SID>fHi("String",       s:cgF5, "",     s:ctF5, "",     "")
call <SID>fHi("Character",    s:cgF5, "",     s:ctF5, "",     "")
call <SID>fHi("Number",       s:cgF5, "",     s:ctF5, "",     "")
call <SID>fHi("Boolean",      s:cgF5, "",     s:ctF5, "",     "")
call <SID>fHi("Float",        s:cgF5, "",     s:ctF5, "",     "")
" Identifier group
call <SID>fHi("Identifier",   s:cgF6, "",     s:ctF6, "",     "NONE")
call <SID>fHi("Function",     s:cgF6, "",     s:ctF6, "",     "NONE")
" Statement group
call <SID>fHi("Statement",    s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("Conditional",  s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("Repeat",       s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("Label",        s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("Operator",     s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("Keyword",      s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("Exception",    s:cgF4, "",     s:ctF4, "",     "")
" Preprocessor group
call <SID>fHi("PreProc",      s:cgF6, "",     s:ctF6, "",     "")
call <SID>fHi("Include",      s:cgF6, "",     s:ctF6, "",     "")
call <SID>fHi("Define",       s:cgF6, "",     s:ctF6, "",     "")
call <SID>fHi("Macro",        s:cgF6, "",     s:ctF6, "",     "")
call <SID>fHi("PreCondit",    s:cgF6, "",     s:ctF6, "",     "")
" Type group
call <SID>fHi("Type",         s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("StorageClass", s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("Structure",    s:cgF4, "",     s:ctF4, "",     "")
call <SID>fHi("Typedef",      s:cgF4, "",     s:ctF4, "",     "")
" Special group
call <SID>fHi("Special",      s:cgF2, "",     s:ctF2, "",     "")
call <SID>fHi("SpecialChar",  s:cgF2, "",     s:ctF2, "",     "")
call <SID>fHi("Tag",          s:cgF2, "",     s:ctF2, "",     "")
call <SID>fHi("Delimiter",    s:cgF2, "",     s:ctF2, "",     "")
call <SID>fHi("SpecialComment", s:cgF2, "",   s:ctF2, "",     "")
call <SID>fHi("Debug",        s:cgF2,  "",    s:ctF2, "",     "")
" Underlined group
call <SID>fHi("Underlined",   s:cgF7, "",     s:ctF7, "",     "")
" Ignore group
call <SID>fHi("Ignore",       s:cgFg, "",     s:ctFg, "",     "")
" Error group
call <SID>fHi("Error",        s:cgF1, s:cgBG, s:ctF1, s:ctBG, "")
" Todo group
call <SID>fHi("Todo",         s:cgF2, s:cgBG, s:ctF2, s:ctBG, "")

"" Highlight groups for plugins
call <SID>fHi("IndentGuidesOdd",  "",     s:cgBf, "",     s:ctBf, "")
call <SID>fHi("IndentGuidesEven", "",     s:cgBg, "",     s:ctBg, "")
call <SID>fHi("SignColumn",       "",     s:cgBg, "",     s:ctBg, "")
call <SID>fHi("GitGutterAdd",     s:cgF4, s:cgBg, s:ctF4, s:ctBg, "")
call <SID>fHi("GitGutterChange",  s:cgF2, s:cgBg, s:ctF2, s:ctBg, "")
call <SID>fHi("GitGutterDelete",  s:cgF1, s:cgBg, s:ctF1, s:ctBg, "")
call <SID>fHi("GitGutterChangeDelete", s:cgF2, s:cgBg, s:ctF2, s:ctBg, "")
call <SID>fHi("ExtraWhitespace",  "",     s:cgB1, "",     s:ctB1, "")
call <SID>fHi("lspReference",     s:cgFG, s:cgB4, s:ctFG, s:ctB4, "")

let g:rainbow_conf = {
    \ 'guifgs': [s:cgF1, s:cgF2, s:cgF3, s:cgF4, s:cgF5, s:cgF6, s:cgF7],
    \ 'ctermfgs': [s:ctF1, s:ctF2, s:ctF3, s:ctF4, s:ctF5, s:ctF6, s:ctF7],
\ }

"" Remove functions
delf <SID>fHi

"" Remove color variables
unlet s:cgBG s:cgBg s:cgBf s:cgBF s:cgFG s:cgFg s:cgB1 s:cgB2 s:cgB3 s:cgB4 s:cgB5 s:cgF1 s:cgF2 s:cgF3 s:cgF4 s:cgF5 s:cgF6 s:cgF7
unlet s:ctBG s:ctBg s:ctBf s:ctBF s:ctFG s:ctFg s:ctB1 s:ctB2 s:ctB3 s:ctB4 s:ctB5 s:ctF1 s:ctF2 s:ctF3 s:ctF4 s:ctF5 s:ctF6 s:ctF7

