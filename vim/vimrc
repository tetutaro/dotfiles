"" report terminal type as true color
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"" read default vimrc
source $HOME/.vim/defaults.vim
"" overwrite settings for vi to vim
set showtabline=2  " „Çø„Éñ„Éê„Éº„ÇíÂ∏∏„Å´Ë°®Á§∫„Åô„Çã

"" Package Manager
if has('vim_starting')
    if !filereadable(expand('~/.vim/autoload/plug.vim'))
        if !executable("curl")
            echoerr "You have to install curl or first install vim-plug yourself!"
            execute "q!"
        endif
        echo "Installing Vim-Plug..."
        echo ""
        silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        let g:not_finish_vimplug = "yes"
        autocmd VimEnter * PlugInstall
    endif
endif

"" Plugins
"" https://vimawesome.com/
call plug#begin(expand('~/.vim/plugged'))
" Operation
Plug 'airblade/vim-rooter'
Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-commentary'
" Interface
"Plug 'hecal3/vim-leader-guide'
Plug 'liuchengxu/vim-which-key'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" Visualize
Plug 'nathanaelkane/vim-indent-guides'
Plug 'ntpeters/vim-better-whitespace'
Plug 'luochen1990/rainbow'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mattn/webapi-vim'
"Plug 'Wildog/airline-weather.vim'
Plug 'cocopon/colorswatch.vim'
Plug 'cocopon/pgmnt.vim'
" Sidebar
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'ryanoasis/vim-devicons'
Plug 'tetutaro/nerdtree-git-plugin'
Plug 'tetutaro/tagbar'
Plug 'lvht/tagbar-markdown'
" Shell
Plug 'Shougo/vimshell.vim'
Plug 'thinca/vim-quickrun'
" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
" Markdown
Plug 'godlygeek/tabular'
Plug 'joker1007/vim-markdown-quote-syntax'
Plug 'rcmdnk/vim-markdown'
" https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl?hl=ja
" Programming
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'w0rp/ale'
Plug 'plytophogy/vim-virtualenv'
Plug 'Vimjas/vim-python-pep8-indent'
" Original Functions and Keymap
Plug 'tetutaro/vague-move.vim'
Plug 'tetutaro/vague-input-python.vim'
Plug 'tetutaro/vague-input-markdown.vim'
call plug#end()
filetype plugin indent on

"" settings for Operation
" rooter
let g:rooter_change_directory_for_non_project_files = 'current'
" expand region
xmap ee <Plug>(expand_region_expand)
xmap EE <Plug>(expand_region_shrink)
" Commentary
xmap co <Plug>Commentary

"" settings for Visualization
" indent guide
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
" use vim-python-pep8-indent so disable default python indent
let g:pymode_indent = 0
let g:python_pep8_indent_multiline_string = 0
let g:python_pep8_indent_hang_closing = 0
" better whitespace
let g:better_whitespace_enabled = 1
let g:better_whitespace_ctermcolor = 'red'
let g:strip_whitespace_on_save = 0
let g:better_whitespace_filetypes_blacklist = [
    \ 'diff',
    \ 'gitcommit',
    \ 'unite',
    \ 'qf',
    \ 'help',
    \ 'leaderGuide'
\ ]
" rainbow
let g:rainbow_active = 1
" airline
" COMMAND mode
" INSERT mode
" INSERT COMPLETION mode
" INSERT COMPLETION mode
" NORMAL mode
" NORMAL mode
" OPERATION PENDING mode
" REPLACE mode (R in n)
" VIRTUAL REPLACE mode (gR in n)
" SELECT mode (gh in n, ^G in v)
" SELECT-LINE mode (gH in n, ^G in V)
" SELECT-BLOCK mode (g^H in n, ^G in ^V)
" VIRTUAL mode
" VIRTUAL-LINE mode
" VIRTUAL-BLOCK mode
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'c'  : 'c',
    \ 'i'  : 'i',
    \ 'ic' : 'ic',
    \ 'ix' : 'ix',
    \ 'n'  : 'n',
    \ 'ni' : 'ni',
    \ 'no' : 'o',
    \ 'R'  : 'R',
    \ 'Rv' : 'vR',
    \ 's'  : 's',
    \ 'S'  : 'S',
    \ '' : '^S',
    \ 'v'  : 'v',
    \ 'V'  : 'V',
    \ '' : '^V',
\ }
let g:airline_theme = 'tomorrow'
let g:airline_powerline_fonts = 0
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#show_line_numbers = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_count = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#left_sep = 'ÓÇ∞'
let g:airline#extensions#tabline#left_alt_sep = 'ÓÇ±'
let g:airline#extensions#tabline#right_sep = 'ÓÇ≤ '
let g:airline#extensions#tabline#right_alt_sep = 'ÓÇ≥ '
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#whitespace#enabled = 0
"let g:airline#extensions#whitespace#checks = ['trailing']
"let g:airline#extensions#whitespace#trailing_format = 'T:%s'
let g:airline#extensions#wordcount#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#readonly#enabled = 1
let g:airline_section_z = airline#section#create([
    \ 'windowswap', '%3p%%', 'linenr', ':%2v'
\ ])
let g:airline_symbols = get(g:, 'airline_symbols', {})
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤ '
let g:airline_right_alt_sep = 'ÓÇ≥ '
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
" use octicons font
let g:airline_symbols.branch = 'Ôêò'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'
" airline weather
"let g:weather#area = 'Sapporo,JP'
"let g:weather#unit = 'metric'
"let g:weather#appid = 'XXXXXXXX'
"let g:weather#cache_file = '~/.cache/.weather'
"let g:weather#cache_ttl = '3600'
"" use wearther font
let g:weather#format = '%s %.0fÓåπ'
let g:weather#status_map = {
    \ "01d": "Óåç ",
    \ "02d": "ÓåÇ ",
    \ "03d": "ÓåΩ ",
    \ "04d": "Óåí ",
    \ "09d": "Óåô ",
    \ "10d": "Óåà ",
    \ "11d": "Óåù ",
    \ "13d": "Óåö ",
    \ "50d": "Óåì ",
    \ "01n": "Óå´ ",
    \ "02n": "Óçæ ",
    \ "03n": "ÓåΩ ",
    \ "04n": "Óåí ",
    \ "09n": "Óåô ",
    \ "10n": "Óå• ",
    \ "11n": "Óåù ",
    \ "13n": "Óåö ",
    \ "50n": "Óåì ",
\}
" nerdtree
let g:nerdtree_tabs_open_on_console_startup = 0
let g:nerdtree_tabs_focus_on_files = 1
let g:NERDTreeWinSize = 30
let g:NERDTreeShowHidden = 0
let g:NERDTreeShowBookmarks = 0
let g:NERDTreeMinimalUI = 1
let g:NERDTreeIgnore = ['\~$', '\.pyc$', '__pycache__']
let g:webdevicons_enable_airline_tabline = 0
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 0
" use octicons font
let g:NERDTreeIndicatorMapCustom = {
    \ 'Modified'  : 'Ôëô',
    \ 'Staged'    : 'Ôëó',
    \ 'Untracked' : 'Ôí±',
    \ 'Renamed'   : 'Ôëö',
    \ 'Unmerged'  : 'Ôê†',
    \ 'Deleted'   : 'Ôëò',
    \ 'Dirty'     : 'Ôêõ',
    \ 'Clean'     : 'Ôí°',
    \ 'Ignored'   : 'Ôë¥',
    \ 'Unknown'   : 'Ôí£',
\ }
" tagbar
let g:tagbar_width = 30
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_show_linenumbers = 0
let g:tagbar_iconchars = ['‚ñ∏', '‚ñæ']

"" settings for Shell
"let g:vimshell_split_command = 'nicely'
"let g:vimshell_split_command = 'vsplit'
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
    \ 'outputter': 'buffer',
    \ 'outputter/buffer/split': '8sp ""',
    \ 'outputter/buffer/close_on_empty': 1,
\ }
let g:quickrun_config.markdown = {'exec': 'knit_markdown.sh %s'}
let g:quickrun_no_default_key_mappings = 1

"" settings for Git
let g:gitgutter_override_sign_column_highlihgt = 0
"let g:gitgutter_sign_added = 'Ôëó'
"let g:gitgutter_sign_modified = 'Ôëô'
"let g:gitgutter_sign_removed = 'Ôëò'
"let g:gitgutter_sign_removed_first_line = 'Ôê†'
"let g:gitgutter_sign_modified_removed = 'Ôêõ'

"" settings for Markdown
let g:markdown_quote_syntax_codeblocks = [
    \ [
        \ "^\\s*\\(>\\s*\\)\\?```{",
        \ "\\(\\s*,.*\\)\\?}$",
        \ "^\\s*\\(>\\s*\\)\\?```\\ze\\s*$"
    \ ],
\ ]
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_auto_insert_bullets = 1
let g:vim_markdown_new_list_item_indent = 0
augroup AddMarkdownExtension
    autocmd!
    autocmd BufRead,BufNewFile *.{txt,text,pymd} set filetype=markdown
augroup END

"" settings for Programming
let g:python_host_prog = $VIRTUAL_ENV . '/bin/python3'
let g:python_pyls_prog = $VIRTUAL_ENV . '/bin/pyls'
augroup PythonLanguageServer
    if executable(g:python_pyls_prog)
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'pyls',
            \ 'cmd': {server_info -> [g:python_pyls_prog]},
            \ 'whitelist': ['python'],
            \ 'workspace_config': {
                \ 'pyls': {
                    \ 'plugins': {
                        \ 'pycodestyle': {'enabled': v:false},
                        \ 'jedi_definition': {
                            \ 'follow_imports': v:true,
                            \ 'follow_builtin_imports': v:true,
                        \ }
                    \ }
                \ }
            \ }
        \ })
    endif
augroup END
let g:lsp_highlight_references_enabled = 1
let g:lsp_diagnostic_enabled = 0
let g:lsp_diangostic_echo_cursor = 0
let g:lsp_signs_enabled = 0
let g:lsp_log_verbose = 0
"let g:lsp_log_file = expand('~/vim-lsp.log')
"let g:asyncomplete_log_file = expand('~/vim-async.log')
let g:ale_linters_explicit = 1
let g:ale_completion_enabled = 0
let g:ale_sign_error = '>E'
let g:ale_sign_warning = '>W'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%][%severity%] %code: %%s'
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_list_window_size = 5
let g:ale_lint_on_enter = 1
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:warn_about_trailing_whitespace = 1
let g:ale_linters = {
    \ 'python': ['flake8'],
    \ }
let g:ale_python_flake8_executable = g:python_host_prog
let g:ale_python_flake8_options = '-m flake8 --max-complexity 15'
let g:ale_fix_on_save = 0

augroup PythonIndenting
    autocmd!
    autocmd Filetype python setlocal indentkeys-=<:>
    autocmd Filetype python setlocal indentkeys-=:
augroup END

"" settings for original plugins
augroup VagueInputPython
    autocmd!
    autocmd Filetype python call vagueinputpython#Configure()
augroup END
augroup VagueInputMarkdown
    autocmd!
    autocmd Filetype markdown call vagueinputmarkdown#Configure()
augroup END

"" load leader keymappings
source $HOME/.vim/keymap.vim
"" reload webdevicons
if exists("g:loaded_webdevicons")
    call webdevicons#refresh()
endif
augroup DontContinueComment
    autocmd!
    autocmd Filetype * set formatoptions-=ro
augroup END
