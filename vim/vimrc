"" report terminal type as true color
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"" read default vimrc
source $HOME/.vim/defaults.vim
"" overwrite settings for vi to vim
set showtabline=2  " タブバーを常に表示する

""" toggle tmux status line
"if !has('gui_running') && $TMUX !=# ''
"    augroup Tmux
"    autocmd!
"    autocmd VimEnter,VimLeave * silent !tmux set status
"    augroup END
"endif

"" Package Manager
if has('vim_starting')
    if !filereadable(expand('~/.vim/autoload/plug.vim'))
        if !executable("curl")
            echoerr "You have to install curl or first install vim-plug yourself!"
            execute "q!"
        endif
        echo "Installing Vim-Plug..."
        echo ""
        silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        let g:not_finish_vimplug = "yes"
        autocmd VimEnter * PlugInstall
    endif
endif

"" Plugins
source $HOME/.vim/plugins.vim
filetype plugin indent on

"" settings for Interface
" rooter
let g:rooter_change_directory_for_non_project_files = 'current'
" fzf
" * don't show popup window (split window horizontally ('down': '40%'))
" * don't close window if no candidates ('+0', '+1')
" * don't select multiply ('+m')
command! -bang -nargs=* Lines call fzf#vim#lines(<q-args>, {'options': ['+m', '+0', '+1', '--prompt=Word > '], 'down': '40%'}, <bang>0)
command! -bang -nargs=* BLines call fzf#vim#buffer_lines(<q-args>, {'options': ['+m', '+0', '+1', '--prompt=Word > '], 'down': '40%'}, <bang>0)
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': ['+m', '+0', '+1', '--prompt=Word > '], 'down': '40%'}, <bang>0)
command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, {'options': ['+m', '+0', '+1', '--prompt=File > '], 'down': '40%'}, <bang>0)
command! -bang -nargs=? GFiles call fzf#vim#gitfiles(<q-args>, {'options': ['+m', '+0', '+1', '--prompt=File > '], 'down': '40%'}, <bang>0)
command! -bar -bang -nargs=? -complete=buffer Buffers call fzf#vim#buffers(<q-args>, {'options': ['+m', '+0', '+1', '--prompt=Buffer > '], 'down': '40%'}, <bang>0)
command! -bar -bang Colors call fzf#vim#colors({'options': ['+m', '+0', '+1', '--prompt=Color > '], 'down': '40%'}, <bang>0)
command! -bar -bang Helptags call fzf#vim#helptags({'options': ['+m', '+0', '+1', '--prompt=Help > '], 'down': '40%'}, <bang>0)

"" settings for Visualization
" indent line
let g:vim_json_syntax_conceal = 0
let g:indentLine_enabled = 1
let g:indentLine_setColors = 1
"let g:indentLine_defaultGroup = 'Comment'
"let g:indentLine_char = '┆'
"let g:indentLine_char = '│'
"let g:indentLine_char = '▏'
let g:indentLine_char = '|'
" better whitespace
let g:better_whitespace_enabled = 1
let g:better_whitespace_ctermcolor = 'red'
let g:strip_whitespace_on_save = 0
let g:better_whitespace_filetypes_blacklist = [
    \ 'diff',
    \ 'gitcommit',
    \ 'unite',
    \ 'qf',
    \ 'help',
    \ 'leaderGuide'
\ ]
" rainbow
let g:rainbow_active = 1
" git gutter
let g:gitgutter_override_sign_column_highlihgt = 0
"let g:gitgutter_sign_added = ''
"let g:gitgutter_sign_modified = ''
"let g:gitgutter_sign_removed = ''
"let g:gitgutter_sign_removed_first_line = ''
"let g:gitgutter_sign_modified_removed = ''

"" settings for Zen Mode
" limelight
let g:limelight_conceal_ctermfg = 240
let g:limelight_conceal_guifg = '#303030'
let g:limelight_default_coefficient = 0.8
let g:limelight_paragraph_span = 0
" goyo
let g:goyo_width = 80
let g:goyo_height = '80%'
let g:goyo_linenr = 0
function! s:goyo_enter()
    if executable('tmux') && strlen($TMUX)
        silent !tmux set status off
        silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
    endif
    set noshowmode
    set noshowcmd
    set scrolloff=999
    Limelight
endfunction
function! s:goyo_leave()
    if executable('tmux') && strlen($TMUX)
        silent !tmux set status on
        silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
    endif
    set showmode
    set showcmd
    set scrolloff=5
    Limelight!
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

"" settings for Markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_emphasis_multiline = 0
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_fenced_languages = ['vim=vim', 'bash=sh', 'zsh=sh', 'sh=sh', 'python=python']
let g:tex_conceal = ''
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_auto_insert_bullets = 1
let g:vim_markdown_new_list_item_indent = 0
augroup AddMarkdownExtension
    autocmd!
    autocmd BufRead,BufNewFile *.{txt,text,pymd} set filetype=markdown
augroup END

"" settings for Python
" vim-python-pep8-indent
let g:pymode_indent = 0
let g:python_pep8_indent_multiline_string = 0
let g:python_pep8_indent_hang_closing = 0

"" settings for Language Server
let g:python_host_prog = $VIRTUAL_ENV . '/bin/python3'
let g:python_pylsp_prog = $VIRTUAL_ENV . '/bin/pylsp'
let g:python_flake8_prog = $VIRTUAL_ENV . '/bin/flake8'
augroup PythonLanguageServer
    if executable(g:python_pylsp_prog)
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'pylsp',
            \ 'cmd': {server_info -> [g:python_pylsp_prog]},
            \ 'whitelist': ['python'],
            \ 'workspace_config': {
                \ 'pylsp': {
                    \ 'plugins': {
                        \ 'pycodestyle': {
                            \ 'enabled': v:false,
                        \ },
                        \ 'pyflakes': {
                            \ 'enabled': v:false,
                        \ },
                        \ 'rope_completion': {
                            \ 'enabled': v:false,
                        \ },
                        \ 'yapf': {
                            \ 'enabled': v:false,
                        \ },
                        \ 'flake8': {
                            \ 'enabled': v:true,
                            \ 'executable': g:python_flake8_prog
                        \ }
                    \ }
                \ }
            \ }
        \ })
    endif
augroup END
let g:lsp_highlight_references_enabled = 1
let g:lsp_diagnostic_enabled = 0
let g:lsp_diangostic_echo_cursor = 0
let g:lsp_signs_enabled = 0
let g:lsp_log_verbose = 0
"let g:lsp_log_file = expand('~/vim-lsp.log')
"let g:asyncomplete_log_file = expand('~/vim-async.log')
" ale
let g:ale_linters_explicit = 1
let g:ale_completion_enabled = 0
let g:ale_sign_error = '>E'
let g:ale_sign_warning = '>W'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%][%severity%] %code: %%s'
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_list_window_size = 5
let g:ale_lint_on_enter = 1
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:warn_about_trailing_whitespace = 1
let g:ale_linters = {
    \ 'python': ['flake8'],
    \ 'javascript': ['eslint'],
    \ 'javascriptreact': ['eslint'],
    \ 'typescript': ['eslint'],
    \ 'typescriptreact': ['eslint'],
    \ }
let g:ale_fixers = {
    \ 'python': ['black'],
    \ 'javascript': ['prettier'],
    \ 'javascriptreact': ['prettier'],
    \ 'typescript': ['prettier'],
    \ 'typescriptreact': ['prettier'],
    \ 'css': ['prettier'],
    \ }
let g:ale_python_flake8_executable = $VIRTUAL_ENV . '/bin/flake8'
let g:ale_fix_on_save = 1

if executable('typescript-language-server')
    augroup TypescriptLanguageServer
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'typescript-language-server',
            \ 'cmd': {server_info -> [&shell, &shellcmdflag, 'typescript-language-server --stdio']},
            \ 'root_uri': {server_info -> lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
            \ 'whitelist': ['javascript', 'javascriptreact', 'typescript', 'typescriptreact'],
        \ })
        autocmd FileType typescript setlocal omnifunc=lsp#complete
    augroup END :echomsg "vim-lsp with typescript-language-server enabled"
else
    :echomsg "vim-lsp for typescript unavailable"
endif

"" settings for original plugins
augroup VagueInputPython
    autocmd!
    autocmd Filetype python call vagueinputpython#Configure()
augroup END
augroup VagueInputJS
    autocmd!
    autocmd Filetype javascript,javascriptreact,typescript,typescriptreact call vagueinputpython#Configure()
augroup END
augroup VagueInputMarkdown
    autocmd!
    autocmd Filetype markdown call vagueinputmarkdown#Configure()
augroup END

"" load leader keymappings
source $HOME/.vim/keymaps.vim
